// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go
//

// Package mock_k8s is a generated GoMock package.
package mock_k8s

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockClientI is a mock of ClientI interface.
type MockClientI struct {
	ctrl     *gomock.Controller
	recorder *MockClientIMockRecorder
	isgomock struct{}
}

// MockClientIMockRecorder is the mock recorder for MockClientI.
type MockClientIMockRecorder struct {
	mock *MockClientI
}

// NewMockClientI creates a new mock instance.
func NewMockClientI(ctrl *gomock.Controller) *MockClientI {
	mock := &MockClientI{ctrl: ctrl}
	mock.recorder = &MockClientIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientI) EXPECT() *MockClientIMockRecorder {
	return m.recorder
}

// GetNamespaces mocks base method.
func (m *MockClientI) GetNamespaces() (*v1.NamespaceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaces")
	ret0, _ := ret[0].(*v1.NamespaceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaces indicates an expected call of GetNamespaces.
func (mr *MockClientIMockRecorder) GetNamespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockClientI)(nil).GetNamespaces))
}

// GetSecrets mocks base method.
func (m *MockClientI) GetSecrets(namespace string) (*v1.SecretList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecrets", namespace)
	ret0, _ := ret[0].(*v1.SecretList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecrets indicates an expected call of GetSecrets.
func (mr *MockClientIMockRecorder) GetSecrets(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecrets", reflect.TypeOf((*MockClientI)(nil).GetSecrets), namespace)
}
